1.何时你会想使用远程版本库，而不是将所有工作保存在本地？
当我想与非同一地理位置的其他人共同完成一份工作时，我会想使用远程版本库。

2.为何你希望始终手动地拉取更改，而不是让 Git 自动与你的远程版本库保持同步？
因为我需要思考是否将我所做的本地更改直接作用于远程仓库上，同时我也要思考别人在远程仓库的更改我是否要应用与我的本地工作，这也就是版本控制的核心思想。

3.说明Fork、克隆和分支之间的不同。何时使用某种功能而不是另一种？
分支是在为原始代码创建一个并行的版本时使用的；
克隆是将Github上的原始仓库复制到本地计算机，作者可以在本地计算机上对原始代码进行修改；
Fork是在Github服务器上的一种克隆，将原始仓库复制到自己的Github账户下，而无需将原始仓库拉回本地计算机，所用的fork都链接回原始仓库，并且更容易向原始仓库提出修改意见，所以在想对别人的代码进行修改，同时不想对原始仓库进行任何的改动时，可以使用fork。

ps.Github操作流程及常用命令
git branch <分支名> 创建新的分支
git branch -d <分之名> 删除分支
git checkout <分之名> 检出并指向该分支
git remote add <仓库名称origin> <url>  链接远程仓库
git remote -v  查看远程仓库详细信息
git pull  将远程仓库的提交拉到本地
git status  查看仓库状态
git add <文件名>  添加到暂存区
git commit  提交到仓库
git push <仓库名origin> <分支名master>  推送到远程仓库
git clone <仓库地址>  克隆远程仓库到本地

4.拥有远程分支的上次已知状态的副本（存储在本地）有何好处？
远程分支的本地副本就是origin/master
当我在本地完成一次在commit，只有我主动push origin master后，远程分支的本地副本会使用最新的commit进行更新，同时远程仓库的master分支也会使用新的commit进行更新
当我在本地和完成分别了一次commit，进行远程仓库的pull操作后，远程仓库的本地副本会用远程仓库最新的commit进行更新（多处一个分支），从而后期进行合并
当我在离线状态下对代码进行更改的同时，其它开发者对远程仓库进行了更改，这种机制让在我上线后想对本地和远程进行合并时，可以检测合并冲突。

5.如何在不使用 Git 或 GitHub 的情况下开展协同？哪种做法更容易？哪种做法更困难？
不使用Git或者Github的情况下，协作者需要分别进行开发，在结束完自己的工作后，需要交换各自的工作，分别分析别人做了什么，然后集中进行讨论选择最优的方案，在并行的协作中这种方法是非常低效、困难的。

