初始化版本库时会发生什么情况？为什么你需要这样做？
使用git init命令在指定目录下进初始化版本库时，会在当前目录下生成一个隐藏的.git文件。进行初始化以后，就可以使用git系统对指定文件系统进行版本控制了。

暂存区与工作目录和版本库有何不同？你认为它具有什么价值？
暂存区存储了文件的某一较早版本；工作目录则存储文件目前工作版本；版本库则存储了文件较早的多个版本。具有从工作目录到版本库的过渡作用，在进行了一定程度改动后需要进行保存时，但只是少量修改且无法从逻辑性上区分成两个版本，因此不想存储到版本库，又担心在当前工作目录进行保存后产生bug修复，此时就可以存储到暂存区，也就是暂存区的价值所在。

如何使用暂存区确保为每项逻辑更改进行一次提交？
在当前工作目录对文件进行更改后，使用git diff对比当前工作目录更改的文件和暂存区的文件，查看待完成对当前工作目录文件的一次逻辑更改后，使用git add将其存入暂存区，再使用git commit提交版本更改。

在哪些情况下，分支可以帮助你有序地组织历史记录？分支将如何提供帮助？
当想对文件不止进行递进式的逻辑更改时，想对文件的当前版本更改后存储一个并行的版本，就可以使用分支系统。可以分支更改可以提交存储到分支系统上，从而不影响主分支文件的更改。

图表如何帮助你直观显示分支结构？
画出来就直观的展示咯。

将两个分支合并到一起有何结果？为什么我们在图表中表示它的方式是那样的？
可以将不同开发者更改的内容合并在一起，从而达成协作开发的目的。

Git 的自动合并与始终手动进行合并各有何优缺点？
自动合并Git可以自动识别出两个分支基于原始版本不同地方的改动，从而在不冲突的基础上自动以开发者的意愿进行合并；而手动合并则是在自动合并发生冲突时，即两名开发者对原始版本的同一个地方进行了改动，此时就需要开发者根据实际情况决定保留那种改动，避免冲突，保证版本正常运行。

